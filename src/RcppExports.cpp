// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetAlleles
CharacterVector GetAlleles(std::vector<std::string> Both, IntegerMatrix Allele, int n_sample);
RcppExport SEXP _mtAnalysis_GetAlleles(SEXP BothSEXP, SEXP AlleleSEXP, SEXP n_sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type Both(BothSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Allele(AlleleSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(GetAlleles(Both, Allele, n_sample));
    return rcpp_result_gen;
END_RCPP
}
// GetFreq
CharacterVector GetFreq(NumericMatrix Freq);
RcppExport SEXP _mtAnalysis_GetFreq(SEXP FreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Freq(FreqSEXP);
    rcpp_result_gen = Rcpp::wrap(GetFreq(Freq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtAnalysis_GetAlleles", (DL_FUNC) &_mtAnalysis_GetAlleles, 3},
    {"_mtAnalysis_GetFreq", (DL_FUNC) &_mtAnalysis_GetFreq, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtAnalysis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
